plugins {
    id 'java'
    id 'idea'
    id 'org.jetbrains.kotlin.jvm' version '1.3.70'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.jlink' version '2.17.3'
}

ext.kotlin_version = '1.3.70'
group 'me.matrix4f.cardr'
version '1.2.0'

repositories {
    mavenCentral()
}

task exportToRelease {
    copy {
        from 'build/libs/Cardr-' + version + '.jar'
        into "C:\\Users\\vgsoh\\Cardr"
    }
}

idea {
    module { inheritOutputDirs = true }
}

jar {
    manifest { attributes 'Main-Class': mainClassName }
}

javafx {
    modules = [ 'javafx.controls', 'javafx.base', 'javafx.web' ]
}

jlink {
    //noinspection GroovyAssignabilityCheck, GrFinalVariableAccess, GroovyAccessibility
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'cardr'
        jvmArgs = [ '-Djava.library.path="dlls"' ]
    }

    forceMerge 'commons-exec'
    forceMerge 'log4j-api'

    jpackageImage.doLast {
        def dllFolder = new File('build/jpackage/CardrLauncher/dlls')
        dllFolder.mkdirs()

        copy {
            from '..\\CardrWindowsCPP\\bin\\Release\\NativeDllInterface\\Win32'
            into "build/jpackage/cardr/dlls"
            include "*.dll"
        }
        copy {
            from '..\\CardrWindowsCPP\\bin\\Release\\NativeDllInterface\\x64'
            into "build/jpackage/cardr/dlls"
            include "*.dll"
        }
    }

    jpackage {
        jpackageHome = jpackageJDK14Home
        appVersion = version

        imageOptions = [
                '--icon', appWindowsICO
        ]

        jvmArgs = [ '-Djava.library.path="dlls"' ]

        installerOptions = [
                '--type', 'msi',

                '--resource-dir', jpackageResourceDir,
                '--description', appDescription,
                '--copyright', appCopyright,
                '--vendor', appCompany,

                '--win-menu',
                '--win-menu-group', 'cardr',
                '--win-per-user-install',
                '--win-upgrade-uuid', windowsUpgradeUUID,
                '--win-shortcut',

                '--verbose'
        ]
    }
}

dependencies {
    implementation 'org.jsoup:jsoup:1.12.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.apache.httpcomponents:httpclient:4.5.10'
    implementation 'org.apache.commons:commons-exec:1.3'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'org.apache.logging.log4j:log4j-api:2.13.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.13.0'
    implementation 'commons-io:commons-io:2.5'
    implementation 'net.lingala.zip4j:zip4j:2.3.0'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}
